#!/usr/bin/env node

/**
 * Module dependencies.
 */

// load the database config
require("dotenv").config();

// Try to connect to data base
const { sequelize } = require("../models");


// at the start of the app we invoke the sequelize function which can connect to data base with the authenticate function.
sequelize
    .authenticate()
    .then(() => {
        console.log("database conected");

        const app = require("../app");
        const debug = require("debug")("beamsaber-store:server");
        const http = require("http");

        /**
         * Get port from environment and store in Express.
         */

        const port = normalizePort(process.env.PORT || "4000");
        app.set("port", port);

        /**
         * Create HTTP server.
         */

        const server = http.createServer(app);

        /**
         * Listen on provided port, on all network interfaces.
         */

        server.listen(port);
        server.on("error", onError);
        server.on("listening", onListening);

        /**
         * Normalize a port into a number, string, or false.
         */

        function normalizePort(val) {
            const port = parseInt(val, 10);

            if (isNaN(port)) {
                // named pipe
                return val;
            }

            if (port >= 0) {
                // port number
                return port;
            }

            return false;
        }

        /**
         * Event listener for HTTP server "error" event.
         */

        function onError(error) {
            if (error.syscall !== "listen") {
                throw error;
            }

            const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

            // handle specific listen errors with friendly messages
            switch (error.code) {
                case "EACCES":
                    console.error(bind + " requires elevated privileges");
                    process.exit(1);
                    break;
                case "EADDRINUSE":
                    console.error(bind + " is already in use");
                    process.exit(1);
                    break;
                default:
                    throw error;
            }
        }

        /**
         * Event listener for HTTP server "listening" event.
         */

        function onListening() {
            const addr = server.address();
            const bind =
                typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
            debug("Listening on " + bind);
        }
    })
    .catch((err) => {
        console.error("error:   " + err);
        exit;
    });
    